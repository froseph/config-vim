" TODO: Add
" ragtag.vim
" repeat.vim
" alchemist.vim - elixir project info
" https://github.com/gregpardo/vim-elixir-ide
" https://www.reddit.com/r/elixir/comments/artahy/vim_users_what_are_your_musthave_plugins_when/
"
" others:
" denite + ripgrep / fzf
" coc.vim
" linting
" nerdtree
" youcompleteme

"
" vim-plug {{{

" Install vim-plug
" Use vim plug for initial simplicity. Perhaps move awai in future
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plugins
call plug#begin('~/.vim/vim-plug')
Plug 'lifepillar/vim-solarized8'    " colors
Plug 'fatih/molokai'                " colors
Plug 'sheerun/vim-polyglot'         " Add syntax highlighting for most things
"Plug 'jiangmiao/auto-pairs'         " add ending pairs
Plug 'LunarWatcher/auto-pairs', { 'tag': '*' } " Add ending pairs. Updated forks
Plug 'ntpeters/vim-better-whitespace' " trailing whitespace
Plug 'mattn/emmet-vim'              " emmit
Plug 'tpope/vim-surround'           " surround
Plug 'alvan/vim-closetag'           " Auto close html tags
Plug 'tpope/vim-commentary'         " commenting scri
Plug 'tpope/vim-fugitive'           " vim plug
Plug 'dense-analysis/ale'           " Vim ale
Plug 'vim-test/vim-test'            " Vim test
"Plug 'kassio/neoterm'               " Neoterm for vim test

" Elixir
Plug 'elixir-editors/vim-elixir'    " add elixir plugins
Plug 'tpope/vim-endwise'            " add `end` after `do`

Plug 'vimwiki/vimwiki'              " vimwiki
Plug 'michal-h21/vim-zettel'        " vim zettel addon for vimwiki

" Fuzzy Finders
"Plug 'junegunn/fzf'                 " fuzzy finder
"Plug 'junegunn/fzf.vim'             " fuzzy finder pt 2
Plug 'srstevenson/vim-picker'

call plug#end()
" }}}

" Settings

" Colors {{{
" set Vim-specific sequences for RGB colors
set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

colorscheme solarized8
set background=light
syntax enable
" }}}

" Whitespace configuration {{{
set tabstop=2 			" visual spaces for tab
set softtabstop=2		" number spaces in <tab> when editing
set shiftwidth=2		" number of spaces in << or >>
set expandtab			" make tabs spaces
set smartindent
set smarttab
" }}}

" UI {{{
set cursorline			" highlight current line
set wildmenu			" menu for autocomplete
set lazyredraw			" don't redraw ui in middle of macro
set showmatch			" highlight matching {}, [] and ()
set ruler			    " show line and column number on bottom
set number			    " show lie numbers
set laststatus=2		" always show statusline
set modeline
set showcmd             " Show last command on bottom right

"set mousemodel=popup
"set t_Co=256
"set guioptions=egmrti
"set gfn=Monospace\ 10
" }}}

" Search options {{{
set hlsearch            " highlight search
set incsearch           " incremental search
set ignorecase          " ignore case
set smartcase           " smart case
nnoremap <leader><space> :nohlsearch<CR>        " remove highlight
" }}}

" Filetype handling {{{
filetype indent on		" load filetype specific indents
filetype plugin on      " load filetype specific plugins
"filetype plugin indent on
" }}}

" Encoding {{{
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8
set fileformats=unix,dos,mac
set ttyfast             " Make things scroll fast!
" }}}

" Base Key Mappings {{{
if exists('$SHELL')
    set shell=$SHELL
else
    set shell=/bin/sh
endif

" Fix backspace indent
set backspace=indent,eol,start
"let mapleader=','
set timeoutlen=1500
" }}}


" File/Local specific magic (Not installed) {{{
" Bundle 'localvimrc'
" let g:localvimrc_name = 'local.vimrc'
" let g:localvimrc_ask = 0
" }}}

" Window  {{{
set splitright                  " new window to the right on vsplit
set splitbelow                  " new window below on split
"map <C-j> <C-w>j
"map <C-k> <C-w>k
"map <C-h> <C-w>h
"map <C-l> <C-w>l
"map <C-m> <C-w>_
" }}}

" Folding {{{
set foldenable			    " enable folding
set foldlevelstart=10		" show first 10 levels unfolded
set foldnestmax=10		    " maximum fold nesting
set foldmethod=indent		" use indents as the guidelines for folding
" }}}

" Movement {{{
" move vertically by visual line
" #nnoremap j gj
" #nnoremap k gk
" }}}

" vimwiki {{{
let g:vimwiki_list = [{"path":"~/annex/Notes/", 'auto_tags': 1, 'auto_toc': 1, 'syntax':'markdown', 'ext':'.md'}]
let g:vimwiki_use_mouse = 1
let g:vimwiki_folding = 'expr'
let g:vimwiki_auto_chdir = 1
" }}}

" vim-zettel {{{
let g:zettel_format = '%Y%m%d%H%M%S'

" }}}

" Remappings {{{
nnoremap gV `[v`]           " highlight last inserted text
"nnoremap <leader>u :GundoToggle<CR>     " open gundo.vim
nnoremap <leader>ev :vsp $MYVIMRC<CR>       " open vimrc
"nnoremap <leader>ez :vsp ~/.zshrc<CR>       " open zsrhrc
nnoremap <leader>sv :source $MYVIMRC<CR>    " source vimrc
nnoremap <leader>s :mksession<CR>           " save vim session - reopen with `vim -S`
"nnoremap <leader>a :Ag                      " open ag.vim / silver surfer to search code
" }}}

" CtrlP {{{
" Fuzzy File Searcher. Like CommandT but written in C for speed
" let g:ctrlp_match_window = 'bottom,order:ttb'     " match file top ot bottom
" let g:ctrlp_switch_buffer = 0                     " open files in new buffer
" let g:ctrlp_working_path_mode = 0                 " allow change directory
" let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'        " Use silver surfer to open files
" }}}

" Tmux {{{
" allows cursor change in tmux mode. Use vertical bar in tmux
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
" }}}

" Pathogen {{{
" Installs pathogen
"call pathogen#infect()                      " use pathogen
"call pathogen#runtime_append_all_bundles()  " use pathogen
" }}}

" vim-better-whitespace {{{
let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save=1
" }}}

" vim-ale {{{

" Required, explicitly enable Elixir LS
let g:ale_linters = {}
let g:ale_linters.elixir = ['elixir-ls']

" Required, tell ALE where to find Elixir LS
let g:ale_elixir_elixir_ls_release = expand("~/sandbox/elixir-ls/rel")

let g:ale_fix_on_save = 1
let g:ale_fixers = {'*': ['trim_whitespace']}
let g:ale_fixers.elixir = ['mix_format']
"let g:ale_fixers = { 'elixir': ['mix_format'] }

" Optional, you can disable Dialyzer with this setting
"let g:ale_elixir_elixir_ls_config = {'elixirLS': {'dialyzerEnabled': v:false}}

" Optional, configure as-you-type completions
"set completeopt=menu,menuone,preview,noselect,noinsert
"let g:ale_completion_enabled = 1
" }}}

" vim-test {{{
let test#strategy = "vimterminal"
" }}}

" auto-pairs {{{
let g:AutoPairsCompatibleMaps = 0
" }}}

" Auto commands {{{
augroup configgroup
    autocmd!
    "autocmd BufEnter * silent! lcd %:p:h 	" auto cd into directory of the file
    autocmd VimEnter * highlight clear SignColumn
    "autocmd BufWritePre *.php,*.py,*.js,*.txt,*.hs,*.java,*.md
    "            \:call <SID>StripTrailingWhitespaces()

    " Vim
    autocmd Filetype vim let b:autompairs_enabled =  0
    au Filetype vim let b:autopairs_enabled = 0

    " Python
    autocmd FileType python setlocal commentstring=#\ %s expandtab

    " Scripts
    " autocmd BufEnter *.sh setlocal tabstop=2
    " autocmd BufEnter *.sh setlocal shiftwidth=2
    " autocmd BufEnter *.sh setlocal softtabstop=2

    " Ruby
    " autocmd FileType ruby setlocal tabstop=2
    " autocmd FileType ruby setlocal shiftwidth=2
    " autocmd FileType ruby setlocal softtabstop=2
    autocmd FileType ruby setlocal commentstring=#\ %s

    " autocmd FileType html setlocal tabstop=2 shiftwidth=2 expandtab
    " autocmd FileType javascript setlocal tabstop=2 shiftwidth=2 expandtab
    " autocmd FileType css setlocal tabstop=2 shiftwidth=2 expandtab
    " autocmd FileType scss setlocal tabstop=2 shiftwidth=2 expandtab
    " autocmd FileType elixir setlocal tabstop=2 shiftwidth=2 expandtab
    " autocmd FileType eelixir setlocal tabstop=2 shiftwidth=2 expandtab
augroup END
" }}}

" Backups {{{
" Move backups to a different direcotry
"set backup
"set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
"set backupskip=/tmp/*,/private/tmp/*
"set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
"set writebackup
" }}}

" Functions {{{
" toggle between number and relativenumber
function! ToggleNumber()
    if(&relativenumber == 1)
        set norelativenumber
        set number
    else
        set relativenumber
    endif
endfunc

" strips trailing whitespace at the end of files. this
" is called on buffer write in the autogroup above.
function! <SID>StripTrailingWhitespaces()
    " save last search & cursor position
    let _s=@/
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfunction
" }}}

" vim:foldmethod=marker:foldlevel=0
